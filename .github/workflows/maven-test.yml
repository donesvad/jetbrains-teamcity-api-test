name: TeamCity DSL Automation Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      # Restore images tar if available
      - name: Restore TeamCity Docker images cache
        id: tc-img-cache
        uses: actions/cache@v4
        with:
          path: teamcity-cache/teamcity-images.tar
          key: teamcity-images-2025-07-v1
          restore-keys: |
            teamcity-images-2025-07-

      # Load from cache or pull then save
      - name: Load or pull TeamCity images
        run: |
          set -euo pipefail
          mkdir -p teamcity-cache
          if [ -f teamcity-cache/teamcity-images.tar ]; then
            echo "Cache hit. Loading TeamCity images from tar..."
            docker load -i teamcity-cache/teamcity-images.tar
          else
            echo "Cache miss. Pulling TeamCity images..."
            docker pull jetbrains/teamcity-server:2025.07
            docker pull jetbrains/teamcity-agent:2025.07
            echo "Saving images to tar for future cache..."
            docker save \
              jetbrains/teamcity-server:2025.07 \
              jetbrains/teamcity-agent:2025.07 \
              -o teamcity-cache/teamcity-images.tar
          fi

      - name: Save TeamCity images cache now
        if: steps.tc-img-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: teamcity-cache/teamcity-images.tar
          key: teamcity-images-2025-07-v1

      - name: Start TeamCity with docker compose
        run: docker compose -f docker-compose.yml -f .github/compose.ci.override.yml up -d tc-server tc-agent

      - name: Show container states
        run: docker compose ps

      - name: Wait for TeamCity inside tc-server netns
        run: |
          echo "Waiting for TeamCity inside tc-server netns at http://localhost:8111"
          for i in $(seq 1 120); do
            state=$(docker inspect -f '{{.State.Status}}' tc-server 2>/dev/null || echo "not-found")
            if [ "$state" != "running" ]; then
              echo "ERROR: tc-server state is $state. Cannot probe inside its netns."
              echo "===== tc-server logs (last 200 lines) ====="
              docker compose logs --tail=200 tc-server || true
              echo "==========================================="
              exit 1
            fi

            code=$(docker run --rm --network "container:tc-server" curlimages/curl:8.10.1 \
              -s -o /dev/null -w "%{http_code}" http://localhost:8111 || true)

            echo "Attempt $i: HTTP $code (state: $state)"
            if [ "$code" = "200" ] || [ "$code" = "401" ]; then
              echo "Server is reachable, HTTP $code"
              exit 0
            fi
            sleep 2
          done

          echo "ERROR: TeamCity did not become reachable in time"
          echo "===== tc-server logs (last 200 lines) ====="
          docker compose logs --tail=200 tc-server || true
          echo "==========================================="
          exit 1

      - name: Bootstrap TeamCity admin
        run: |
          chmod +x scripts/bootstrap-admin.sh
          ./scripts/bootstrap-admin.sh

      - name: Run tests
        env:
          VCS_PAT: ${{ secrets.VCS_PAT }}
          VCS_USERNAME: ${{ secrets.VCS_USERNAME }}
        run: docker compose run --rm test-runner

      - name: Dump logs on failure
        if: failure()
        run: |
          echo "===== tc-server logs ====="
          docker compose logs tc-server || true
          echo "===== tc-agent logs ====="
          docker compose logs tc-agent || true

      - name: Teardown
        if: always()
        run: docker compose down -v
